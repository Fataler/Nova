@<|
label('tut02', 'Tutorial 2 image')
is_start()
|>
<|
stop(bgm)
set_box()
|>
Tutorial 2 images

<|
show(bg, 'rain')
|>
The `show` function is used to display the picture

`bg` is the name of the image's controller in Lua

In the Hierarchy window of the Unity Editor, select `Sprites/BackgroundImage`, and in the `SpriteController` of the Inspector window, you can see that `luaGlobalName` is `bg`

The folder where the image is located is set by the `imageFolder` of the `SpriteController`

`rain` is the image file name in this folder (no suffix such as `.png` is needed here)

By the way: For the method of importing image material into Nova, see [Wiki: Importing Background Image](https://github.com/Lunatic-Works/Nova/wiki/Image-Import)

<|
show(fg, 'moon_halo', {2, 2, 0.5})
|>
Multiple layers can be displayed at the same time, and each layer is controlled by a game object. The `fg` above corresponds to the `ForegroundImage` in Hierarchy

If you need more layers, you can copy more game objects in the Unity Editor and modify `luaGlobalName`

BTW: The order of layers is generally determined by the z coordinate. The `{2, 2}` above are the x and y coordinates, which will be discussed shortly

<|
show(bg, 'room')
|>
Using `show` again on the same layer will replace the current image

The `sprite` of `SpriteRenderer` in the Inspector will display the current image of this layer

<|
hide(fg)
|>
The `hide` function is used to hide the image

<|
move(bg, {1, 0})
|>
The `move` function is used to move the image

`{1, 0}` is the x and y coordinates of the image, which can be seen in the `Transform` in the Inspector

<|
move(bg, {0, 1, 2})
|>
If there is a third parameter, the scaling factor

Parameters in Lua must first omit the former, and then omit the latter. To omit only the preceding arguments, use `nil`

<|
move(bg, {nil, -2, 0.5})
|>
When `move` encounters an omitted parameter, the previous value is kept. Taking advantage of this can avoid losing the same coordinate many times, so that it needs to be changed many times when modifying

<|
move(bg, {nil, nil, {0.5, 2}})
|>
If the third parameter is a table, it will set the scaling in the x and y directions respectively (if it is a 3D model, you can also set the scaling in the z direction)

<|
move(bg, {0, 0, 1, 11, 30})
|>
By the way: if there is a fourth and fifth parameter, it is the z coordinate and the rotation angle around the z axis

<|
move(bg, {nil, nil, nil, nil, {60, 40, 20}})
|>
By the way: if the fifth parameter is a table, it will set the rotation around the x, y, z axes respectively

BTW: To facilitate works with only 2D performances, the first three parameters for coordinates in Nova scripts are x, y, scaling, not x, y, z

By the way: The camera's mode is orthographic by default. At this time, the z-coordinate will not affect the size of the image display, but only affect the layer order.

By the way: If you need to do 3D performances, you can change the camera to perspective, then the z coordinate will affect the size of the picture displayed

By the way: The rendering order of Unity is not completely determined by the z coordinate. If you want to adjust it carefully, you can use the render queue, which will be discussed later. .

<|
move(bg, {0, 0, 1, 10, 0})
show(fg, 'moon_halo')
|>
Ok, put the background back to normal and show `fg`

<|
tint(fg, {1, 0.5, 0})
|>
The `tint` function is used to change the color of an image

The principle is to multiply the RGBA channel of the picture by a coefficient between 0..1, which can be seen in the `color` of `SpriteRenderer` in the Inspector

By the way: Multiplying the coefficient will make the value of RGBA smaller and the picture darker, so you can draw a little brighter when preparing art materials

The color in Nova script is represented by a table, which can include 1..4 values

<|
tint(fg, 0.5)
|>
1 value: `r, g, b` are all this value, `a` is 1, only change the light and shade without changing the hue (in this case, you can use only one value instead of table)

<|
tint(fg, {1, 0.5})
|>
2 values: `r, g, b` are the first value, `a` is the second value

<|
tint(fg, {0, 0.5, 1})
|>
3 values: `r, g, b` are these three values, `a` is 1

<|
tint(fg, {0.5, 0, 1, 0.5})
|>
4 values: `r, g, b, a` are these four values

<|
hide(fg)
move(fg, {0, 0, 1})
tint(fg, 1)
|>
Well, hide `fg`. If you will not use a layer for a long time, it is best to restore the coordinates and color to the original state, so as not to forget it the next time you use it

<|
show(bg, 'rain', {1, 1}, {1, 0.5, 0})
|>
Coordinates and colors can also be set in `show`

<|
show(bg, 'room', nil, {0, 0.5, 1})
|>
If omitted, it will keep the previous value

<|
show(bg, 'rain', {0, 0}, 1)
|>
ok, put the background back to normal

<|
show(gaotian, 'normal', {0, -0.3, 0.4})
|>
`show` can also display character portraits, `gaotian` corresponds to `Characters/Gaotian` in Hierarchy

The character portrait is usually composed of several parts, called a pose, and the `normal` above is the name of the pose

The poses for all roles are defined in `pose.lua`

By the way: For the method of importing vertical drawing materials into Nova, see [Wiki: Vertical Drawing Import](https://github.com/Lunatic-Works/Nova/wiki/Standing-Import)

<|
show(gaotian, 'cry')
|>
Change your face

<|
show(gaotian, 'normal')
|>
When the vertical drawing changes, there is a fade in and out of a few tenths of a second by default.

BTW:: Tutorial 5 will talk about more complex animations

<|
move(gaotian, {-4, nil})
|>
`move` can also move the vertical drawing

<|
move(gaotian, pos_r)
|>
You can define the coordinates used by `move` as a variable `pos_r` to avoid entering the same coordinates many times. Such variables are generally defined in `animation_presets.lua`

<|
tint(gaotian, {0.5, 1, 0.5})
|>
`tint` can also change the color of the vertical drawing

<|
env_tint(gaotian, color_sunset)
tint(gaotian, 1)
|>
There is also a function `env_tint`, which is also used to change the color of the vertical drawing (cannot be used on normal pictures). Here `color_sunset` is also a variable defined in `animation_presets.lua`

<|
tint(gaotian, 0.5)
|>
The effects of `env_tint` and `tint` can be stacked. `env_tint` is generally used for long-term color changes caused by dusk, night and other environments, and `tint` is used for short-term performance effects

<|
move(gaotian, pos_c)
env_tint(gaotian, 1)
tint(gaotian, 1)
|>
Ok, restore the position and color of the vertical painting

<|
move(cam, {1, 0})
|>
`move` also moves the camera

By the way: At present, the cameras we use are `MainCamera` in Hierarchy, the use of `MaskCamera` will be discussed later

BTW: The current camera mode is orthographic, so the vertical drawing and background appear to move like a whole picture. If you change the camera to perspective, there will be a three-dimensional parallax effect

<|
move(cam, {1, 1, 6})
|>
Note that the zoom parameter in the camera's coordinates does not control the `scale` in `Transform`, but the `size` in `Camera`

BTW: If the camera mode is perspective, the zoom parameter is controlled by `Camera.fieldOfView`

<|
move(cam, {0, 0, 5})
|>
restore camera position

<|
hide(gaotian)
|>
Tutorial 2 Images This concludes
@<| jump_to 'tut03' |>