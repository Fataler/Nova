@<|
label('tut05', 'Tutorial 5 animation')
is_start()
|>
<|
show(bg, 'rain')
stop(bgm)
set_box()
|>
Tutorial 5 Animation

<|
show(gaotian, 'normal', pos_l)
anim:move(gaotian, pos_r)
|>
The `anim:move` function is used to create a move animation

<|
move(gaotian, pos_l)
|>
Without `anim`, `move` is instantaneous

BTW: `anim` is a Lua object `WrapAnim`, which encapsulates `DontDestroyOnLoad/​NovaGameController/​NovaAnimation/​PerDialogue` in Hierarchy, and `move` is a method of `anim`

By the way: see `animation.lua` and `animation_high_level.lua` for details

<|
anim:move(gaotian, pos_r, 2)
|>
The third parameter of `anim:move` is the duration of the animation, in seconds, the default is 1 second

The fourth parameter of `anim:move` is easing, which is the acceleration and deceleration of nonlinear animation

Most of the time, it's a table with two parameters representing the speed at the beginning and end of the animation

The default easing of the moving animation is `{0, 0}`, which seems to have a more natural acceleration and deceleration. Here are a few examples

<|
show(gaotian, 'normal', {-5, 3.5, 0.1})
show(xiben, 'normal', {-5, 0.5, 0.1})
anim:move(gaotian, {5}, 2, {0, 2})
anim:move(xiben, {5}, 2, {1, 1})
|>
The little man above is slow first and then fast

<|
move(gaotian, {-5})
move(xiben, {-5})
anim:move(gaotian, {5}, 2, {2, 0})
anim:move(xiben, {5}, 2, {1, 1})
|>
The little man above is fast first and then slow

<|
move(gaotian, {-5})
move(xiben, {-5})
anim:move(gaotian, {5}, 2, {0, -1})
anim:move(xiben, {5}, 2, {1, 1})
|>
The villain above runs out for a while and then comes back (the speed at the end is -1)

By the way: The above nonlinear animations use cubic curves. If you want to use other types of curves, you can set the first parameter of easing to the name of the curve. These names are in `animation.lua` in ` Defined in easing_func_name_map`

<|
move(gaotian, {-5})
move(xiben, {-5})
anim:move(gaotian, {5}, 2, {'bezier', 0, 1})
anim:move(xiben, {5}, 2, {1, 1})
|>
BTW: For example `bezier` can make more exaggerated acceleration and deceleration

<|
move(gaotian, {0})
move(xiben, {-5})
anim:move(gaotian, {5}, 2, {'shake', 20, 0.5})
anim:move(xiben, {5}, 2, {1, 1})
|>
By the way: `shake` can make a shake, note that it will not stop at the target position defined by `move` at the end, but stop at the initial position

<|
move(gaotian, pos_c)
hide(xiben)
anim:tint(gaotian, {0.5, 1, 0.5}, 2)
|>
The `anim:tint` function is used to create a color-changing animation

<|
tint(gaotian, 1)
play(bgm, 'gaotian', 0)
anim:volume(bgm, 0.5, 3)
|>
The `anim:volume` function is used to create volume animations

<|
anim:fade_in(bgm, 'qianye', 0.5, 3)
|>
Since it is common to start playing music and set the volume to 0, and then use animation to change the volume, we provide the `anim:fade_in` function to fade in the music

<|
anim: fade_out(bgm, 3)
|>
`anim:fade_out` function is to fade out the music

<|
anim:move(gaotian, pos_r):move(gaotian, pos_l)
|>
Continue to use `move` and other methods to create animations after an animation, you can connect animations in series

<|
anim:move(gaotian, pos_r
    ):_and():tint(gaotian, {0.5, 1, 0.5}
    ):move(gaotian, pos_l
    ):_and():tint(gaotian, 1)
|>
To make two animations in parallel, use the `_and()` function

When the above animation starts to play, pause the game, you can see the tree structure of multiple animations in `DontDestroyOnLoad/​NovaGameController/​NovaAnimation` in Hierarchy

By the way: There are actually three `AnimationEntry` in `anim:move`, which control position, rotation, and scale respectively

BTW: Lua doesn't allow line breaks before colons, so writing fluent interface line breaks in Lua seems like a pain in the ass. .

<|
show(xiben, 'normal', pos_r)
local entry = anim:move(gaotian, pos_c)
entry:move(gaotian, pos_l)
entry:tint(gaotian, {0.5, 1, 0.5})
entry:move(xiben, pos_c)
entry:tint(xiben, {1, 0.5, 0.5})
|>
To create a more complex tree structure, you can save the end point of an animation in a local variable, and use this variable as the start point of multiple animations

<|
move(gaotian, pos_l)
tint(gaotian, 1)
hide(xiben)
tint(xiben, 1)
anim:move(gaotian, pos_r
    ):wait(1
    ):move(gaotian, pos_l)
|>
The `anim:wait` function is used to delay, the unit is still seconds

Operations such as showing/hiding characters, changing expressions, etc. are done instantaneously. If you want to put them in the animation, you need to use the `anim:action` function to convert them into an animation (with a duration of 0)

<|
anim:move(gaotian, pos_r
    ):action(show, gaotian, 'cry'
    ):move(gaotian, pos_l
    ):action(hide, gaotian)
|>
The first parameter of `anim:action` is a function that completes in an instant, and the following parameters are the parameters of that function

<|
show(gaotian, 'normal', pos_l)
anim:move(gaotian, pos_r
    ):action(function()
        show(gaotian, 'cry')
        show(xiben, 'normal', pos_l)
        sound('clap')
    end
    ):move(gaotian, pos_l
    ):action(function()
        show(gaotian, 'normal')
        hide(xiben)
    end)
|>
You can also set the first parameter of `anim:action` to an anonymous function, in which you can write any code

By the way: Although any code can be written in `action`, it is best not to create new animations in `action`. This requirement can generally be achieved by serial and parallel animations

<|
anim_persist:move(gaotian, pos_r, 10)
|>
The animations mentioned above are all within one dialogue. If you want the animation to span many dialogues, you must use `anim_persist` instead of `anim`

Write `anim_persist_begin()` at the beginning of a persistent animation, it will handle some state of the animation system and save system

By the way: `anim_persist` encapsulates `DontDestroyOnLoad/​NovaGameController/​NovaAnimation/​Persistent` in Hierarchy

BTW: If you worry about forgetting to write `anim_persist_begin` and `anim_persist_end`, you can use `Tools/Scenarios/lint.py` to check

<|
anim_persist_end()
|>
Write `anim_persist_end()` after the end of the persistent animation

<|
show(gaotian, 'normal', pos_l)
show(xiben, 'normal', pos_c)
anim_persist:loop(function(entry)
    return entry:move(gaotian, pos_c
        ):move(gaotian, pos_l)
end)
anim_persist:loop(function(entry)
    return entry:move(xiben, pos_r, 1.414
        ):move(xiben, pos_c, 1.414)
end)
|>
The `anim_persist:loop` function is used to create an infinite loop animation

Its parameter is a function `func`, this function takes an animation as input, creates a new animation after this animation, and outputs the end point of the created animation

Because it is an infinite loop, it can only be used as a continuous animation, not as an in-dialogue animation

<|
hide(gaotian)
hide(xiben)
anim_persist_end()
|>
This concludes Tutorial 5 Animation
@<| jump_to 'tut06' |>