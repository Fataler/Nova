@<|
label('tut01', 'Tutorial 1 Text and Script Structure')
is_unlocked_start()
|>
<|
stop(bgm)
set_box()
|>
Tutorial 1 Text and Script Structure

When watching these tutorials, it's best to compare what's running in Unity with the scripts in the Scenarios folder

If you don't see a step clearly, you can jump back to the previous position in the text review interface at any time

The text written here will be displayed in the game

If you want to click the mouse to display the next paragraph of text, you need to leave a blank line between the two paragraphs of text


It's not impossible to add a few more lines, but it will make the script more ugly

if there are no blank lines
will display the two lines of text together.

Add blank lines to the text you want to display together
<noparse></noparse>
An empty XML tag can be used (tutorial 4 will cover XML tags in detail)

Wang Er Gong: Two Chinese colons are used to separate the speaker's name and the content of the speech

Zhang Qianye::You can also use two English colons

<|
print('111')
-- This is a comment in Lua
|>
A block of Lua code can be inserted above the literal with `<| ... |>`. The above code will output "111" in the Console window of the Unity Editor

BTW: There is no blank line between the above code block and the text. If there is a blank line...

<|
print('222')
|>

It is to click the mouse to run the code (at the same time the dialog box becomes empty), and then click the mouse to display the text

We call something between two blank lines a "dialogue entry". A conversation may have text or code

BTW: We call it a "dialogue" with or without characters talking
@<| jump_to 'tut01_2' |>

@<|
label 'tut01_2'
|>
A game script can be divided into many nodes, and each node can have many dialogues

There is an eager execution block at the beginning and end of each node with the syntax `@<| ... |>`

BTW: A block of code in a conversation is actually called a lazy execution block. Advance code blocks are executed when the script is parsed, and delayed code blocks are executed during the game

<noparse><</noparse><noparse>|</noparse> and <noparse>@<</noparse><noparse>|</noparse> cannot appear at the beginning of a line of text

<noparse>|</noparse><noparse>></noparse> cannot appear at the end of a line of text

<noparse>:</noparse><noparse>:</noparse> and <noparse>:</noparse><noparse>:</noparse> cannot appear in the text

They are all reserved words of Nova scripts. If they must appear, they can be separated with XML tags (because Nova parses these reserved words first, and TextMeshPro parses XML later)

There must be a `label` function in the early code block at the beginning of the node, which defines the name of the node

For example, the name of the node we are currently in is `tut01_2`, and the name of the node above is `tut01`

The "name" here is for internal use by the program. We can also define a "display name", which is displayed to players in the save interface and other places

For example, the beginning of the node above has `label('tut01', 'Tutorial 1 Text and Script Structure')`, so the name is `tut01`, and the display name is "Tutorial 1 Text and Script Structure"

By the way: If a function in Lua has only one parameter, and the parameter is a string literal or a table constructor, the parentheses of the function can be omitted (see [Lua official website](https://www.lua.org/pil/5 .html))

And this node only starts with `label 'tut01_2'`, then the display name defaults to the same as the node above (in the same file). You can check it out in the archive interface
@<| jump_to 'tut01_3' |>

@<|
label('tut01_3', 'The second half of tutorial 1')
|>
Now we define another node and change the display name

If a plot is relatively long, it can be split into several nodes, and can also be placed in several txt files

The names of the nodes must be different, but the display name can be the same so the player doesn't notice that there are actually several nodes in the script

In the advance code block at the beginning of the node, it is also necessary to define the starting position, that is, whether this node will be displayed in the chapter selection interface

`is_start` indicates that this node is the starting position. After the player walks to this node in the game, the starting position will be unlocked in the chapter selection interface

`is_unlocked_start` indicates that this node is the starting position and is unlocked at the beginning

`is_default_start` indicates that this node is the default start position

If you don't need the chapter selection interface, you can set `is_default_start` only in the first node, and do not set the start position in other nodes

In the advance code block at the end of the node, there is generally a `jump_to` function, which defines the name of the node to jump to

If the plot is over, use the `is_end` function

By the way: As for how to do the branch option, I will talk about it later

After modifying the script, pressing R in the game will reload the script without restarting the game

This function is only valid in the Unity Editor, and it is gone after the game is packaged

If an error occurs when running the game after modifying the script, it is generally because the previous archive is incompatible with the new script. At this time, you need to clear the archive, click `Nova -> Clear Save Data` in the upper menu of the Unity Editor

When making a game, adding a new script generally does not require clearing the archive, and modifying an existing script may require clearing the archive. After the game is packaged, players will not need to clear the save file under normal circumstances

If you want to try to modify the Colorless script, you need to delete the English version of the script first, otherwise the Chinese and English scripts will not work (see the [Instructions on GitHub](https://github.com/Lunatic-Works /Nova))

This concludes Tutorial 1 Text and Script Structure
@<| jump_to 'tut02' |>