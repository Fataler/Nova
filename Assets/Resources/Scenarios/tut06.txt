@<|
label('tut06', 'Tutorial 6 special effects and transitions')
is_start()
|>
<|
show(bg, 'rain')
stop(bgm)
set_box()
|>
Tutorial 6 Effects and Transitions

<|
vfx(bg, 'lens_blur', 1, { _Size = 10 })
|>
The `vfx` function is used to add special effects to pictures

Each effect is a shader, defined by the `.shaderproto` file in `Assets/Nova/ShaderProtos/`

The second parameter is the name of the effect. For example, the shader name in Unity is `Lens Blur`, and the corresponding effect name in Lua is `lens_blur`

The third parameter is the display degree of the special effect, 0 means no display at all, 1 means complete display, the default is 1

The fourth parameter is used to set other properties of the shader. The properties that can be set by each shader are defined in the `.shaderproto` file. For example, the properties of `lens_blur` have `_Size` and `_Offset`

Only one effect can be added to each `SpriteController`, the new effect will replace the old one

<|
vfx(bg, 'mono')
|>
There are also some commonly used shaders, such as `mono` to turn images into black and white

<|
vfx(bg, 'glow', 1, { _Size = 10, _Strength = 10 })
|>
`glow` is used to add a glow to the image

<|
vfx(bg, 'wiggle', 1, { _XAmp = 0.1, _XFreq = 10, _TFreq = 10 })
|>
`wiggle` is used to make the picture twist randomly. The animation in the shader is independent of Nova's animation system

<|
vfx(bg, nil)
|>
Setting the effect name to nil cancels the effect

<|
show(fg, 'film_dirt', {0, 0, 0.5})
vfx(fg, 'multiply')
|>
`multiply` sets the blending mode of the image to multiply, that is, the black part of the layer will make the background black, and the white part will remain unchanged, which can be used to make effects such as dust

<|
show(fg, 'moon_halo', {0, 0, 0.5})
vfx(fg, 'screen')
|>
`screen` sets the blending mode of the image to complement multiplication, that is, the white part of this layer will make the background white, and the black part will remain unchanged, which can be used to make effects such as lighting

<|
vfx(fg, 'screen_blink')
|>
Most effects are available in multiply and screen versions

<|
show(gaotian, 'normal', pos_c)
hide(fg)
move(fg, {0, 0, 1})
vfx(fg, nil)
|>
At present, it is not possible to add special effects to the character vertical drawing. If necessary, you can make the vertical drawing a picture, and then use `SpriteController` to display it

<|
vfx(cam, 'lens_blur', 1, { _Size = 10 })
|>
You can also add special effects to the camera, then the vertical painting and the background are blurred together

<|
vfx(cam, {'mono', 1})
|>
The camera can add multiple layers of effects, as long as the effect name is set to a table, the second parameter is the layer of the effect, the default is 0

Now the image taken by the camera first passes through the special effect `lens_blur` of layer 0, and then passes through the special effect `mono` of layer 1

<|
vfx(cam, {'wiggle', 1}, 1, { _XAmp = 0.1, _XFreq = 10, _TFreq = 10 })
|>
New effects on the same layer will replace the old ones

<|
vfx(cam, nil)
vfx(cam, {nil, 1})
|>
When canceling the special effect, you need to cancel the special effect of each layer separately

<|
anim:vfx(bg, 'lens_blur', {0, 1}, 1, { _Size = 10 })
|>
The `anim:vfx` function is used to create special effects animations

Its third parameter is the display degree of the special effect at the initial and final time, and the fourth parameter is the duration of the animation

<|
anim:vfx(bg, 'lens_blur', {1, 0}, 1, { _Size = 10 })
|>
Reverse the third parameter, it is the animation of the special effect disappearing

<|
anim:trans(bg, 'room', 'fade', 1, { _Mask = 'Masks/wipe_left' })
|>
The `anim:trans` function is used to create transition animations, such as turning a background image into another

Its second parameter is the name of the new image, the third parameter is the name of the effect, and the fourth parameter is the duration of the animation

<|
anim:trans2(bg, 'rain', 'color', 1, { _ColorAdd = 1 })
|>
The `anim:trans2` function is the second type of transition animation

<|
anim:trans(bg, 'room', 'fade', 1, { _Mask = 'Masks/wipe_left' })
|>
The difference between the first type and the second type of transition is that the first type of transition displays two pictures before and after the transition at the same time.

<|
anim:trans2(bg, 'rain', 'color', 1, { _ColorAdd = 1 })
|>
The second type of transition only displays one picture at a time, first let the previous picture disappear (for example, the picture becomes white), and then let the latter picture appear.

<|
anim:trans(cam, function()
        hide(gaotian)
        show(xiben, 'normal', pos_c)
        show(bg, 'room')
    end, 'fade', 1, { _Mask = 'Masks/wipe_left' })
|>
You can also add transitions to the camera. At this time, the vertical painting and the background are transitioned together.

The transition is actually a special effect. On the `SpriteController`, the transition will make the current special effect disappear.

On the camera, the transition occupies the effect layer 1 by default, and the layer can be set in the parameters of the effect name.

<|
anim:trans_left(bg, 'rain'):trans_right(bg, 'room')
|>
`animation_presets.lua` defines functions such as `trans_left`, `trans_right`, which is to add some commonly used parameters to the transition

<|
hide(xiben)
|>
This concludes Tutorial 6 Effects and Transitions

More tutorials are under construction, if you still have questions, you can issue an issue on GitHub, or add a QQ group to discuss
@<| is_end() |>